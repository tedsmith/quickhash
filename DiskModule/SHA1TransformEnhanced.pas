//i=0
    T := (B and C) or (not B and D) + K20 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[0];
    Data[0] := roldword(Data[0] xor Data[2] xor Data[8] xor Data[13], 1);
//i=1
    T := (A and B) or (not A and C) + K20 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[1];
    Data[1] := roldword(Data[1] xor Data[3] xor Data[9] xor Data[14], 1);
//i=2
    T := (E and A) or (not E and B) + K20 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[2];
    Data[2] := roldword(Data[2] xor Data[4] xor Data[10] xor Data[15], 1);
//i=3
    T := (D and E) or (not D and A) + K20 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[3];
    Data[3] := roldword(Data[3] xor Data[5] xor Data[11] xor Data[0], 1);
//i=4
    T := (C and D) or (not C and E) + K20 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[4];
    Data[4] := roldword(Data[4] xor Data[6] xor Data[12] xor Data[1], 1);
//i=5
    T := (B and C) or (not B and D) + K20 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[5];
    Data[5] := roldword(Data[5] xor Data[7] xor Data[13] xor Data[2], 1);
//i=6
    T := (A and B) or (not A and C) + K20 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[6];
    Data[6] := roldword(Data[6] xor Data[8] xor Data[14] xor Data[3], 1);
//i=7
    T := (E and A) or (not E and B) + K20 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[7];
    Data[7] := roldword(Data[7] xor Data[9] xor Data[15] xor Data[4], 1);
//i=8
    T := (D and E) or (not D and A) + K20 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[8];
    Data[8] := roldword(Data[8] xor Data[10] xor Data[0] xor Data[5], 1);
//i=9
    T := (C and D) or (not C and E) + K20 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[9];
    Data[9] := roldword(Data[9] xor Data[11] xor Data[1] xor Data[6], 1);
//i=10
    T := (B and C) or (not B and D) + K20 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[10];
    Data[10] := roldword(Data[10] xor Data[12] xor Data[2] xor Data[7], 1);
//i=11
    T := (A and B) or (not A and C) + K20 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[11];
    Data[11] := roldword(Data[11] xor Data[13] xor Data[3] xor Data[8], 1);
//i=12
    T := (E and A) or (not E and B) + K20 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[12];
    Data[12] := roldword(Data[12] xor Data[14] xor Data[4] xor Data[9], 1);
//i=13
    T := (D and E) or (not D and A) + K20 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[13];
    Data[13] := roldword(Data[13] xor Data[15] xor Data[5] xor Data[10], 1);
//i=14
    T := (C and D) or (not C and E) + K20 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[14];
    Data[14] := roldword(Data[14] xor Data[0] xor Data[6] xor Data[11], 1);
//i=15
    T := (B and C) or (not B and D) + K20 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[15];
    Data[15] := roldword(Data[15] xor Data[1] xor Data[7] xor Data[12], 1);
//i=16
    T := (A and B) or (not A and C) + K20 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[0];
    Data[0] := roldword(Data[0] xor Data[2] xor Data[8] xor Data[13], 1);
//i=17
    T := (E and A) or (not E and B) + K20 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[1];
    Data[1] := roldword(Data[1] xor Data[3] xor Data[9] xor Data[14], 1);
//i=18
    T := (D and E) or (not D and A) + K20 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[2];
    Data[2] := roldword(Data[2] xor Data[4] xor Data[10] xor Data[15], 1);
//i=19
    T := (C and D) or (not C and E) + K20 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[3];
    Data[3] := roldword(Data[3] xor Data[5] xor Data[11] xor Data[0], 1);
//i=20
    T := (B xor C xor D) + K40 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[4];
    Data[4] := roldword(Data[4] xor Data[6] xor Data[12] xor Data[1], 1);
//i=21
    T := (A xor B xor C) + K40 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[5];
    Data[5] := roldword(Data[5] xor Data[7] xor Data[13] xor Data[2], 1);
//i=22
    T := (E xor A xor B) + K40 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[6];
    Data[6] := roldword(Data[6] xor Data[8] xor Data[14] xor Data[3], 1);
//i=23
    T := (D xor E xor A) + K40 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[7];
    Data[7] := roldword(Data[7] xor Data[9] xor Data[15] xor Data[4], 1);
//i=24
    T := (C xor D xor E) + K40 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[8];
    Data[8] := roldword(Data[8] xor Data[10] xor Data[0] xor Data[5], 1);
//i=25
    T := (B xor C xor D) + K40 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[9];
    Data[9] := roldword(Data[9] xor Data[11] xor Data[1] xor Data[6], 1);
//i=26
    T := (A xor B xor C) + K40 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[10];
    Data[10] := roldword(Data[10] xor Data[12] xor Data[2] xor Data[7], 1);
//i=27
    T := (E xor A xor B) + K40 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[11];
    Data[11] := roldword(Data[11] xor Data[13] xor Data[3] xor Data[8], 1);
//i=28
    T := (D xor E xor A) + K40 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[12];
    Data[12] := roldword(Data[12] xor Data[14] xor Data[4] xor Data[9], 1);
//i=29
    T := (C xor D xor E) + K40 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[13];
    Data[13] := roldword(Data[13] xor Data[15] xor Data[5] xor Data[10], 1);
//i=30
    T := (B xor C xor D) + K40 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[14];
    Data[14] := roldword(Data[14] xor Data[0] xor Data[6] xor Data[11], 1);
//i=31
    T := (A xor B xor C) + K40 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[15];
    Data[15] := roldword(Data[15] xor Data[1] xor Data[7] xor Data[12], 1);
//i=32
    T := (E xor A xor B) + K40 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[0];
    Data[0] := roldword(Data[0] xor Data[2] xor Data[8] xor Data[13], 1);
//i=33
    T := (D xor E xor A) + K40 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[1];
    Data[1] := roldword(Data[1] xor Data[3] xor Data[9] xor Data[14], 1);
//i=34
    T := (C xor D xor E) + K40 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[2];
    Data[2] := roldword(Data[2] xor Data[4] xor Data[10] xor Data[15], 1);
//i=35
    T := (B xor C xor D) + K40 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[3];
    Data[3] := roldword(Data[3] xor Data[5] xor Data[11] xor Data[0], 1);
//i=36
    T := (A xor B xor C) + K40 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[4];
    Data[4] := roldword(Data[4] xor Data[6] xor Data[12] xor Data[1], 1);
//i=37
    T := (E xor A xor B) + K40 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[5];
    Data[5] := roldword(Data[5] xor Data[7] xor Data[13] xor Data[2], 1);
//i=38
    T := (D xor E xor A) + K40 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[6];
    Data[6] := roldword(Data[6] xor Data[8] xor Data[14] xor Data[3], 1);
//i=39
    T := (C xor D xor E) + K40 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[7];
    Data[7] := roldword(Data[7] xor Data[9] xor Data[15] xor Data[4], 1);
//i=40
    T := (B and C) or (B and D) or (C and D) + K60 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[8];
    Data[8] := roldword(Data[8] xor Data[10] xor Data[0] xor Data[5], 1);
//i=41
    T := (A and B) or (A and C) or (B and C) + K60 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[9];
    Data[9] := roldword(Data[9] xor Data[11] xor Data[1] xor Data[6], 1);
//i=42
    T := (E and A) or (E and B) or (A and B) + K60 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[10];
    Data[10] := roldword(Data[10] xor Data[12] xor Data[2] xor Data[7], 1);
//i=43
    T := (D and E) or (D and A) or (E and A) + K60 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[11];
    Data[11] := roldword(Data[11] xor Data[13] xor Data[3] xor Data[8], 1);
//i=44
    T := (C and D) or (C and E) or (D and E) + K60 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[12];
    Data[12] := roldword(Data[12] xor Data[14] xor Data[4] xor Data[9], 1);
//i=45
    T := (B and C) or (B and D) or (C and D) + K60 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[13];
    Data[13] := roldword(Data[13] xor Data[15] xor Data[5] xor Data[10], 1);
//i=46
    T := (A and B) or (A and C) or (B and C) + K60 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[14];
    Data[14] := roldword(Data[14] xor Data[0] xor Data[6] xor Data[11], 1);
//i=47
    T := (E and A) or (E and B) or (A and B) + K60 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[15];
    Data[15] := roldword(Data[15] xor Data[1] xor Data[7] xor Data[12], 1);
//i=48
    T := (D and E) or (D and A) or (E and A) + K60 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[0];
    Data[0] := roldword(Data[0] xor Data[2] xor Data[8] xor Data[13], 1);
//i=49
    T := (C and D) or (C and E) or (D and E) + K60 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[1];
    Data[1] := roldword(Data[1] xor Data[3] xor Data[9] xor Data[14], 1);
//i=50
    T := (B and C) or (B and D) or (C and D) + K60 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[2];
    Data[2] := roldword(Data[2] xor Data[4] xor Data[10] xor Data[15], 1);
//i=51
    T := (A and B) or (A and C) or (B and C) + K60 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[3];
    Data[3] := roldword(Data[3] xor Data[5] xor Data[11] xor Data[0], 1);
//i=52
    T := (E and A) or (E and B) or (A and B) + K60 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[4];
    Data[4] := roldword(Data[4] xor Data[6] xor Data[12] xor Data[1], 1);
//i=53
    T := (D and E) or (D and A) or (E and A) + K60 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[5];
    Data[5] := roldword(Data[5] xor Data[7] xor Data[13] xor Data[2], 1);
//i=54
    T := (C and D) or (C and E) or (D and E) + K60 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[6];
    Data[6] := roldword(Data[6] xor Data[8] xor Data[14] xor Data[3], 1);
//i=55
    T := (B and C) or (B and D) or (C and D) + K60 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[7];
    Data[7] := roldword(Data[7] xor Data[9] xor Data[15] xor Data[4], 1);
//i=56
    T := (A and B) or (A and C) or (B and C) + K60 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[8];
    Data[8] := roldword(Data[8] xor Data[10] xor Data[0] xor Data[5], 1);
//i=57
    T := (E and A) or (E and B) or (A and B) + K60 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[9];
    Data[9] := roldword(Data[9] xor Data[11] xor Data[1] xor Data[6], 1);
//i=58
    T := (D and E) or (D and A) or (E and A) + K60 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[10];
    Data[10] := roldword(Data[10] xor Data[12] xor Data[2] xor Data[7], 1);
//i=59
    T := (C and D) or (C and E) or (D and E) + K60 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[11];
    Data[11] := roldword(Data[11] xor Data[13] xor Data[3] xor Data[8], 1);
//i=60
    T := (B xor C xor D) + K80 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[12];
    Data[12] := roldword(Data[12] xor Data[14] xor Data[4] xor Data[9], 1);
//i=61
    T := (A xor B xor C) + K80 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[13];
    Data[13] := roldword(Data[13] xor Data[15] xor Data[5] xor Data[10], 1);
//i=62
    T := (E xor A xor B) + K80 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[14];
    Data[14] := roldword(Data[14] xor Data[0] xor Data[6] xor Data[11], 1);
//i=63
    T := (D xor E xor A) + K80 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[15];
    Data[15] := roldword(Data[15] xor Data[1] xor Data[7] xor Data[12], 1);
//i=64
    T := (C xor D xor E) + K80 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[0];
    Data[0] := roldword(Data[0] xor Data[2] xor Data[8] xor Data[13], 1);
//i=65
    T := (B xor C xor D) + K80 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[1];
    Data[1] := roldword(Data[1] xor Data[3] xor Data[9] xor Data[14], 1);
//i=66
    T := (A xor B xor C) + K80 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[2];
    Data[2] := roldword(Data[2] xor Data[4] xor Data[10] xor Data[15], 1);
//i=67
    T := (E xor A xor B) + K80 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[3];
    Data[3] := roldword(Data[3] xor Data[5] xor Data[11] xor Data[0], 1);
//i=68
    T := (D xor E xor A) + K80 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[4];
    Data[4] := roldword(Data[4] xor Data[6] xor Data[12] xor Data[1], 1);
//i=69
    T := (C xor D xor E) + K80 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[5];
    Data[5] := roldword(Data[5] xor Data[7] xor Data[13] xor Data[2], 1);
//i=70
    T := (B xor C xor D) + K80 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[6];
    Data[6] := roldword(Data[6] xor Data[8] xor Data[14] xor Data[3], 1);
//i=71
    T := (A xor B xor C) + K80 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[7];
    Data[7] := roldword(Data[7] xor Data[9] xor Data[15] xor Data[4], 1);
//i=72
    T := (E xor A xor B) + K80 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[8];
    Data[8] := roldword(Data[8] xor Data[10] xor Data[0] xor Data[5], 1);
//i=73
    T := (D xor E xor A) + K80 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[9];
    Data[9] := roldword(Data[9] xor Data[11] xor Data[1] xor Data[6], 1);
//i=74
    T := (C xor D xor E) + K80 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[10];
    Data[10] := roldword(Data[10] xor Data[12] xor Data[2] xor Data[7], 1);
//i=75
    T := (B xor C xor D) + K80 + E;
    B := rordword(B, 2);
    E := T + roldword(A, 5) + Data[11];
    Data[11] := roldword(Data[11] xor Data[13] xor Data[3] xor Data[8], 1);
//i=76
    T := (A xor B xor C) + K80 + D;
    A := rordword(A, 2);
    D := T + roldword(E, 5) + Data[12];
    Data[12] := roldword(Data[12] xor Data[14] xor Data[4] xor Data[9], 1);
//i=77
    T := (E xor A xor B) + K80 + C;
    E := rordword(E, 2);
    C := T + roldword(D, 5) + Data[13];
    Data[13] := roldword(Data[13] xor Data[15] xor Data[5] xor Data[10], 1);
//i=78
    T := (D xor E xor A) + K80 + B;
    D := rordword(D, 2);
    B := T + roldword(C, 5) + Data[14];
    Data[14] := roldword(Data[14] xor Data[0] xor Data[6] xor Data[11], 1);
//i=79
    T := (C xor D xor E) + K80 + A;
    C := rordword(C, 2);
    A := T + roldword(B, 5) + Data[15];
    Data[15] := roldword(Data[15] xor Data[1] xor Data[7] xor Data[12], 1);
